create a folder in system for project ...

Initialize git // if want

create a virtusl environment
 -----------> python -m venv env

Activate tha environment
------------> env\Scripts\activate

Add a .gitignore file and write there .env

create a requirement.txt file
Here list all required dependencies

install all dependencies of requirement.txt file
-------------> pip istall -r requirement.txt

creates a new Django project named "backend"
-------------> django-admin startproject backend

cd to backend

 create a new Django app using the startapp command, 
-------------> python manage.py startapp <app_name>

update setting.py file // copy the file
backend\backend\settings.py

Undersatand jwt tokens ....

Create registration view

-> create a serializer for the Django User model using Django REST Framework. It serializes/deserializes User instances to/from JSON representations.
     crearte a file serializer.py in app(api) folder
     code:---------------------------------------------------
     from django.contrib.auth.models import User  # Import the User model from Django's authentication system
     from rest_framework import serializers  # Import serializers from Django REST Framework

     class UserSerializer(serializers.ModelSerializer):  # Define a serializer for the User model
        class Meta:  # Meta class to specify metadata options
          model = User  # Specify the User model for the serializer
          fields = ["id", "username" , "password"]  # Specify the fields to include in the serialized representation
          extra_kwargs = {"password": {"write_only": True}}  # Specify additional options for the password field
    
        def create(self, validated_data):  # Method to create a new user
        # Create a new user instance using the validated data
         user = User.objects.create_user(**validated_data)
          return user  # Return the newly created user instance



->create a Django view for creating user instances using Django REST Framework (DRF)
 update views.py
 code:-----------------------------------------------------------------------
from django.shortcuts import render  # Import render function from Django
from django.contrib.auth.models import User  # Import User model from Django's authentication system
from rest_framework import generics  # Import generics module from Django REST Framework
from.serializers import UserSerializer  # Import UserSerializer class from your serializers module
from rest_framework.permissions import IsAuthenticated, AllowAny  # Import permission classes from Django REST Framework

     # Create your views here.

class CreateUserView(generics.CreateAPIView):  # Define a view for creating users
    queryset = User.objects.all()  # Specify the queryset to fetch all User objects
    serializer_class = UserSerializer  # Specify the serializer class to use for serializing/deserializing User objects
    permission_classes = [AllowAny]  # Specify the permission classes to determine who can access this view

-> connecting our Auth routes
   goto urls.py in backened and update
   # This Django URL configuration defines the URL patterns for your Django project. Here's a breakdown of what each part of the code does:

   code:-
         from django.contrib import admin  # Import the admin module
         from django.urls import path, include  # Import functions for defining URL patterns
         from api.views import CreateUserView  # Import the CreateUserView class for user registration
         from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView  # Import views for JWT token management

         # Define URL patterns
         urlpatterns = [
             path('admin/', admin.site.urls),  # Map the URL '/admin/' to the Django admin interface
             path("api/user/register/", CreateUserView.as_view(), name="register"),  # Map the URL '/api/user/register/' to the CreateUserView for user registration
             path("api/token/", TokenObtainPairView.as_view(), name="get_token"),  # Map the URL '/api/token/' to the TokenObtainPairView for obtaining JWT tokens
             path("api/token/refresh/", TokenRefreshView.as_view(), name="refresh"),  # Map the URL '/api/token/refresh/' to the TokenRefreshView for refreshing JWT tokens
             path("api-auth/", include("rest_framework.urls")),  # Include the Django REST Framework's authentication URLs
         ]

-> Now in terminal( cd to backened)
The makemigrations cmd is used to generate new migration files based on changes you have made to your models. These migration files define the operations that need to be applied to the database schema to make it match the changes you've made to your models.
-------python manage.py makemigrations
--------python manage.py migrate

---------python manage.py runserver

 Now go to route ---/api/user/register/
       ->create new user
       -> now goto  ---/api/token/ 
              ->generate access and refresh token by entering the user credential



