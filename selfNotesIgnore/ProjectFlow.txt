create a folder in system for project ...

Initialize git // if want

create a virtusl environment
 -----------> python -m venv env

Activate tha environment
------------> env\Scripts\activate

Add a .gitignore file and write there .env

create a requirement.txt file
Here list all required dependencies

install all dependencies of requirement.txt file
-------------> pip istall -r requirement.txt

creates a new Django project named "backend"
-------------> django-admin startproject backend

cd to backend

 create a new Django app using the startapp command, 
-------------> python manage.py startapp <app_name>

update setting.py file // copy the file
backend\backend\settings.py

Undersatand jwt tokens ....

Create registration view

-> create a serializer for the Django User model using Django REST Framework. It serializes/deserializes User instances to/from JSON representations.
     crearte a file serializer.py in app(api) folder
     code:---------------------------------------------------
     from django.contrib.auth.models import User  # Import the User model from Django's authentication system
     from rest_framework import serializers  # Import serializers from Django REST Framework

     class UserSerializer(serializers.ModelSerializer):  # Define a serializer for the User model
        class Meta:  # Meta class to specify metadata options
          model = User  # Specify the User model for the serializer
          fields = ["id", "username" , "password"]  # Specify the fields to include in the serialized representation
          extra_kwargs = {"password": {"write_only": True}}  # Specify additional options for the password field
    
        def create(self, validated_data):  # Method to create a new user
        # Create a new user instance using the validated data
         user = User.objects.create_user(**validated_data)
          return user  # Return the newly created user instance



->create a Django view for creating user instances using Django REST Framework (DRF)
 update views.py
 code:-----------------------------------------------------------------------
from django.shortcuts import render  # Import render function from Django
from django.contrib.auth.models import User  # Import User model from Django's authentication system
from rest_framework import generics  # Import generics module from Django REST Framework
from.serializers import UserSerializer  # Import UserSerializer class from your serializers module
from rest_framework.permissions import IsAuthenticated, AllowAny  # Import permission classes from Django REST Framework

     # Create your views here.

class CreateUserView(generics.CreateAPIView):  # Define a view for creating users
    queryset = User.objects.all()  # Specify the queryset to fetch all User objects
    serializer_class = UserSerializer  # Specify the serializer class to use for serializing/deserializing User objects
    permission_classes = [AllowAny]  # Specify the permission classes to determine who can access this view

-> connecting our Auth routes
   goto urls.py in backened and update
   # This Django URL configuration defines the URL patterns for your Django project. Here's a breakdown of what each part of the code does:

   code:-
         from django.contrib import admin  # Import the admin module
         from django.urls import path, include  # Import functions for defining URL patterns
         from api.views import CreateUserView  # Import the CreateUserView class for user registration
         from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView  # Import views for JWT token management

         # Define URL patterns
         urlpatterns = [
             path('admin/', admin.site.urls),  # Map the URL '/admin/' to the Django admin interface
             path("api/user/register/", CreateUserView.as_view(), name="register"),  # Map the URL '/api/user/register/' to the CreateUserView for user registration
             path("api/token/", TokenObtainPairView.as_view(), name="get_token"),  # Map the URL '/api/token/' to the TokenObtainPairView for obtaining JWT tokens
             path("api/token/refresh/", TokenRefreshView.as_view(), name="refresh"),  # Map the URL '/api/token/refresh/' to the TokenRefreshView for refreshing JWT tokens
             path("api-auth/", include("rest_framework.urls")),  # Include the Django REST Framework's authentication URLs
         ]

-> Now in terminal( cd to backened)
The makemigrations cmd is used to generate new migration files based on changes you have made to your models. These migration files define the operations that need to be applied to the database schema to make it match the changes you've made to your models.
-------python manage.py makemigrations
--------python manage.py migrate

---------python manage.py runserver

 Now go to route ---/api/user/register/
       ->create new user
       -> now goto  ---/api/token/ 
              ->generate access and refresh token by entering the user credential


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Now create custom models
 goto models.py in api folder and work there

 code:
        from django.db import models
        from django.contrib.auth.models import User
       
       # This class defines the structure of the Note objects in the database.
        class Note(models.Model):
            # A short text field limited to 100 characters for the note's title.
            title = models.CharField(max_length=100)
            
            # A large text field for the note's content. No maximum length is enforced.
            content = models.TextField()
            
            # A date and time field that automatically sets to the note's creation time.
            created_at = models.DateTimeField(auto_now_add=True)
            
            # A reference to the User model, establishing a many-to-one relationship.
            # Each note is linked to a single user, but a user can have many notes.
            # The on_delete=models.CASCADE argument ensures that when a user is deleted,
            # all their notes are also deleted from the database.
            # The related_name="notes" allows access to a user's notes by calling user.notes.all(),
            # providing a straightforward way to retrieve all notes by a particular user.
            author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="notes")
          
            # This method returns the note's title when its object is called,
            # making it easier to identify the note instance, especially in the Django admin interface.
            def __str__(self):
                return self.title
        

Now create a serializer for this model 
   A serializer will allow you to easily convert Note instances into JSON format for API responses and vice-versa, from JSON to Note instances for creating or updating notes via your API.
   ->update serializer.py

          # Import the serializers module from Django Rest Framework
           from rest_framework import serializers
           # Import the Note model from the models.py file in the same directory
           from .models import Note
           
           # Define a class NoteSerializer that inherits from serializers.ModelSerializer
           # This class will be responsible for converting Note instances into JSON format and vice-versa
           class NoteSerializer(serializers.ModelSerializer):
               # Meta class is used to provide metadata to the NoteSerializer class
               class Meta:
                   # Specify the model associated with this serializer
                   model = Note
                   # Define the fields that should be included in the serialized output
                   # This allows you to be explicit about what data should be made available over your API
                   fields = ['id', 'title', 'content', 'created_at', 'author']
                   # Specify fields that should be read-only
                   # read_only_fields are included in the serialized output but are not expected or modified in the input
                   # 'author' is set to read-only to prevent it from being modified through the API directly
                   # This is common for fields that are automatically populated by the model or by the logic in your views
                   read_only_fields = ('author', 'created_at',)


(00:38:-)  Now create views for create , read , delete notes   
    update views.py  ++
            from .serializers import NoteSerializer
            from .models import Note

            # Define the NoteListCreate class that inherits from DRF's ListCreateAPIView
# This class handles both GET requests for listing notes and POST requests for creating a new note
            class NoteListCreate(generics.ListCreateAPIView):
                serializer_class = NoteSerializer # Specify the serializer class to be used, which converts model instances to JSON and vice versa
                permission_classes = [IsAuthenticated]   # This ensures that only authenticated users can access this view
                
                # This method determines which note instances are returned on a GET request
                def get_queryset(self):
                    user = self.request.user# Access the user from the request object (the user making the request)
                    return Note.objects.filter(author=user)# Filter and return only the notes where the authenticated user is the author
                    
                # This method is called during a POST request to save a new instance, ensuring the author field is set
                def perform_create(self, serializer):      
                    if serializer.is_valid():      # First, check if the serializer has valid data
                        serializer.save(author=self.request.user)# If the data is valid, save the instance with the current user as the author
                    else:        
                        print(serializer.errors)# Note: In production, you might want to handle errors differently (e.g., raising an exception or logging)
              

# This class handles DELETE requests for deleting Note instances           
            class NoteDelete(generics.DestroyAPIView):
                serializer_class =NoteSerializer
                permission_classes = [IsAuthenticated]
                
                 # This method returns the queryset of Note instances that are eligible for deletion
                def get_queryset(self):
                    user = self.request.user
                    return Note.objects.filter(author=user)
                         
             
 ->Now setup urls for them  
    create urls.py file in api folder 
    code :-----
        from django.urls import path
        from . import views  # Import views module from the current directory
        # Define the URL patterns for the API
        urlpatterns = [
            # Define a URL pattern for listing and creating notes. The path "notes/" corresponds to the base URL for notes
            # When a GET request is made to this URL, it will list all notes (NoteListCreate.as_view())
            # When a POST request is made to this URL, it will create a new note
            path("notes/", views.NoteListCreate.as_view(), name="note-list"),
        
            # Define a URL pattern for deleting a specific note
            # The path "notes/delete/<int:pk>/" corresponds to the URL for deleting a note with a specific primary key (pk)
            # When a DELETE request is made to this URL with the primary key of the note, it will delete the corresponding note (NoteDelete.as_view())
            path("notes/delete/<int:pk>/", views.NoteDelete.as_view(), name="delete-note")
        ]

Now Link these urls from this file to backend / urls.py file
     update backend/urls.py  ++

         path("api/",include("api.urls")) #By including "api.urls", you're telling Django to include all URL patterns defined in the urls.py file of your api app.


Now update database schema .ie migrate in cmd


    python manage.py makemigrations
        o/p------>Migrations for 'api':
            api\migrations\0001_initial.py
            - Create model Note

    python manage.py migrate
        o/p----> Operations to perform:
                Apply all migrations: admin, api, auth, contenttypes, sessions
                Running migrations:
                Applying api.0001_initial... OK

Now run server to check------------------------------


++++++++++++++++++++++++++     Frontend setup in React      ++++++++++++++++++++++++++++++++++++++++++++++

cd to base directory
setup rect using vite
in terminal 
    -> npm create vite@latest
    -> cd Frontend
    -> npm install

install some packeges
     -> npm install axios react-router-dom jwt-decode

    